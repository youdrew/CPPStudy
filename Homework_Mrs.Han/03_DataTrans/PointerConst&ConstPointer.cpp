// 【常量指针】
// Created by Youdrew on 2021/11/17.
//







#include <iostream>
using namespace std;

int main(){




/*    【常量指针】指向一个常量的指针，但是指针本身不是一个"常量"（Const）。
 *               不能通过指向常量的指针改变所指对象的值，但指针本身可以改变， 可以指向另外的对象。
 *               ！！！常量指针指向的对象不能通过这个指针来修改，可是仍然可以通过原来的声明修改，常量指针可以指向非常量的值！！！
 *               具有只能够读取内存中数据，却不能够修改内存中数据的属性的指针，称为指向常量的指针，简称常量指针。
 *               声明： int const* p;  const int* p;
 */
int a=10; const int b=20;
int const *p1=&b;
    cout << p1 << " " << *p1 << endl;
    p1=&a;                              // 可以修改常量指针的值；
    cout << p1 << " " << *p1 << endl;


/*     【指针常量】这个指针本身是一个常量，它的所指的方向不能被改变。指向的变量可以改变。
*               声明：  int* const p;
*               注：指针常量必须在声明的同时对其初始化，不允许先声明一个指针常量随后再对其赋值，这和声明一般的常量是一样的。
*/

int c=10;
int* const p2 = &c; //因为是常量，所以一开始就需要赋值；
cout << p2 << " " << *p2 << endl;
c=15;               //不可以更改p2的指向，但是可以更被指向的变量的值
cout << p2 << " " << *p2 << endl;



//测试题：
    int m = 10;
    const int n = 20; // const必须在定义的同时初始化

    const int *ptr1 = &m; // 常量指针，指向常量的指针
    int * const ptr2 = &m; // 指针常量，不可以改变方向的指针，一开始就要赋值
    const int * const ptrX = &n; // 指向常量的常指针

    ptr1 = &n; // 正确
  //ptr2 = &n; // 错误，ptr2不能指向其他地方

  //*ptr1 = 3; // 错误，ptr1不能改变指针内容，不能给被指向的常量赋值
    *ptr2 = 4; // 正确，可以修改指针常量所指向的值

  //int *ptr3 = &n; // 错误，n是常量，不能初始化普通指针吗，常量地址只能赋值给常量指针
    const int * ptr4 = &n; // 正确，常量地址初始化常量指针

  //int * const ptr5; // 错误，指针常量定义时必须初始化
  //ptr5 = &m; // 错误，指针常量不能在定义后赋值




}


// 【学习目标】 生存期
// Created by Youdrew on 2021/11/14.
//
// stack概念 栈：由编译器自动分配释放，存放函数的参数值，局部变量的值等。其操作方式类似于数据结构中的栈。作用域已结束，就会由系统销毁该变量。

// Heap概念 堆：由程序员分配释放， 若程序员不释放，程序结束时可能由 OS 回收 。注意它与数据结构中的堆是两回事，分配方式倒是类似于链表。


/*
 *        生存期：
 *              即从诞生到消失的时间段，在生存期内，对象的值或保持不变，知道改变他的值为止。对象生存期分为静态生存期和动态生存期两种。
 *
 *        静态生存期：
 *              如果对象的生存期与程序的运行期相同，则称它具有静态生存期。
 *
 *        动态生存期：
 *
 *
 *
 */

//  静态生存期：只有这一个
//  动态生存期：默认的，每次声明都会造出一个新的来，函数内的如果不加static，就默认是动态



// 全局静态 ： 只能有一个。在namespace下声明。（局部出现的不算）
// 局部静态 ： 在局部范围（可见范围内）内只有这么一个。在函数内用static声明
// 全局动态 ： 每次声明都出现一个新的。
// 局部动态 ： 每次声明都是一个新的，然后出了这个函数这个就被销毁掉，不影响外面的那个动态。



#include<iostream>
using namespace std;

int i =1;                                           //i全局变量，静态生存期：在命名空间作用域中，都是有静态生存期


void Other()
{
    //a,b为静态局部变量，具有全局寿命，局部可见，第一次进入函数时初始化，因为加了static
    static int a = 2;
    static int b ;
    //c局部变量，动态生存期，每次进入函数都初始化
    int c = 10;

    a+=2;
    i+=32;
    c+=5;

    cout<<"Other:"<<endl;

    cout<<"i: "<<i<<" a: "<<a<<" b: "<<b<<" c: "<<c<<endl;
}

int main()
{
    //静态局部变量，全局寿命，局部可见
    static int a;                                       //a是在main里有一个静态（main）局部，在other里头也有一个静态局部，因为两个都是局部，所以在那个局部里会生成一个新的暂时替代掉这个

    //b,c局部变量，动态生存期
    int b= -1;
    int c = 0;

    cout<<"Main:"<<endl;
    cout<<"i: "<<i<<" a: "<<a<<" b: "<<b<<" c: "<<c<<endl;
    c+=8;

    Other();

    cout<<"Main:"<<endl;
    cout<<"i: "<<i<<" a: "<<a<<" b: "<<b<<" c: "<<c<<endl;

    i+=10;
    Other();

    return 0;
}
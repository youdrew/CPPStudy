// 【数组指针】与【指针数组】
// Created by Youdrew on 2021/12/14.
#include <iostream>
#include <string>
using namespace std;







int main(){
/*
 【指针数组】：由指针构成的数组。这里执行 p+1 时，则 p 指向下一个数组元素，这样赋值是错误的：p=a；因为 p 是个不可知的表示，只存在 p [0]、p [1]、p [2]...
*/
//用指针构建一个二维数组

    int line1[] = { 1, 0, 0 }; //矩阵的第一行
    int line2[] = { 0, 1, 0 }; //矩阵的第二行
    int line3[] = { 0, 0, 1 }; //矩阵的第三行
//定义整型指针数组并初始化
    int *pLine[3] = { line1, line2, line3 };    //这是一个由指针集构成的数组
    cout << "Matrix test:" << endl;
//输出矩阵
    for (int i = 0; i < 3; i++)
    {
        for (int j = 0; j < 3; j++)
            cout << pLine[i][j] << " ";
        cout << endl;
    }



/*
 【数组指针】：
 指向一个数组的指针：指向一个整型的一维数组，这个一维数组的长度是 n，也可以说是 p 的步长。也就是说执行 p+1 时，p 要跨过 n 个整型数据的长度。
 */

//如要将二维数组赋给一指针，应这样赋值：

    int a[3][4];
    int (*p)[4]; // 该语句是定义一个数组指针，指向含 4 个元素的一维数组。
    p=a;        // 将该二维数组的首地址赋给 p，也就是 a [0] 或 & a [0][0]
    p++;       // 该语句执行过后，也就是 p=p+1;p 跨过行 a [0][] 指向了行 a [1][]

    return 0;
}